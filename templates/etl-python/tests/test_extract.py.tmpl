"""Tests for the extract module."""
import unittest
from unittest.mock import patch, MagicMock
{{ if eq .ExtractMethod "file" }}
import pandas as pd
import os
{{ else if eq .ExtractMethod "api" }}
import requests
{{ else if eq .ExtractMethod "database" }}
import pandas as pd
from sqlalchemy import create_engine
{{ end }}

from src.extract import extract_data

class TestExtract(unittest.TestCase):
    """Test cases for the extract module."""
    
    {{ if eq .ExtractMethod "file" }}
    def test_extract_csv(self):
        """Test extraction from a CSV file."""
        # Create a temporary test CSV file
        import tempfile
        with tempfile.NamedTemporaryFile(suffix='.csv', delete=False) as tmp:
            tmp.write(b"col1,col2,col3\n1,2,3\n4,5,6\n")
            tmp_path = tmp.name
        
        try:
            # Test extraction
            result = extract_data(tmp_path)
            
            # Assertions
            self.assertIsInstance(result, pd.DataFrame)
            self.assertEqual(len(result), 2)  # Two rows
            self.assertEqual(list(result.columns), ['col1', 'col2', 'col3'])
            self.assertEqual(result.iloc[0, 0], 1)
            self.assertEqual(result.iloc[1, 2], 6)
        finally:
            # Clean up the temporary file
            os.unlink(tmp_path)
    
    def test_file_not_found(self):
        """Test that a FileNotFoundError is raised for non-existent files."""
        with self.assertRaises(FileNotFoundError):
            extract_data("nonexistent_file.csv")
    
    {{ else if eq .ExtractMethod "api" }}
    @patch('requests.get')
    def test_extract_from_api_success(self, mock_get):
        """Test successful API data extraction."""
        # Mock the API response
        mock_response = MagicMock()
        mock_response.status_code = 200
        mock_response.json.return_value = {'data': [{'id': 1, 'name': 'Test'}, {'id': 2, 'name': 'Example'}]}
        mock_get.return_value = mock_response
        
        # Test extraction
        result = extract_data("https://test-api.example.com/data")
        
        # Assertions
        self.assertEqual(result, {'data': [{'id': 1, 'name': 'Test'}, {'id': 2, 'name': 'Example'}]})
        mock_get.assert_called_once()
    
    @patch('requests.get')
    def test_extract_from_api_error(self, mock_get):
        """Test API error handling."""
        # Mock a failed API response
        mock_get.side_effect = requests.exceptions.RequestException("API connection error")
        
        # Test that the error is propagated
        with self.assertRaises(requests.exceptions.RequestException):
            extract_data("https://test-api.example.com/data")
    
    {{ else if eq .ExtractMethod "database" }}
    @patch('sqlalchemy.create_engine')
    def test_extract_from_database(self, mock_create_engine):
        """Test extraction from a database."""
        # Create a mock engine and connection
        mock_engine = MagicMock()
        mock_create_engine.return_value = mock_engine
        
        # Mock the pandas read_sql_query function
        with patch('pandas.read_sql_query') as mock_read_sql:
            # Create a sample DataFrame to return
            sample_data = pd.DataFrame({
                'id': [1, 2, 3],
                'name': ['A', 'B', 'C'],
                'value': [10.5, 20.0, 30.5]
            })
            mock_read_sql.return_value = sample_data
            
            # Test extraction
            result = extract_data("SELECT * FROM test_table")
            
            # Assertions
            self.assertIsInstance(result, pd.DataFrame)
            self.assertEqual(len(result), 3)
            self.assertEqual(list(result.columns), ['id', 'name', 'value'])
            mock_create_engine.assert_called_once()
            mock_read_sql.assert_called_once()
    {{ end }}
    
    def test_extract_data_returns_expected_type(self):
        """Test that extract_data returns the expected data type."""
        {{ if eq .ExtractMethod "file" }}
        # Mock the file extraction
        with patch('pandas.read_csv') as mock_read_csv:
            mock_read_csv.return_value = pd.DataFrame({'test': [1, 2, 3]})
            result = extract_data("mock_file.csv")
        {{ else if eq .ExtractMethod "api" }}
        # Mock the API extraction
        with patch('requests.get') as mock_get:
            mock_response = MagicMock()
            mock_response.json.return_value = {'test': [1, 2, 3]}
            mock_get.return_value = mock_response
            result = extract_data()
        {{ else if eq .ExtractMethod "database" }}
        # Mock the database extraction
        with patch('sqlalchemy.create_engine'), patch('pandas.read_sql_query') as mock_read_sql:
            mock_read_sql.return_value = pd.DataFrame({'test': [1, 2, 3]})
            result = extract_data()
        {{ end }}
        
        # Assert the expected data type
        {{ if eq .ExtractMethod "file" }}
        self.assertIsInstance(result, pd.DataFrame)
        {{ else if eq .ExtractMethod "api" }}
        self.assertIsInstance(result, dict)
        {{ else if eq .ExtractMethod "database" }}
        self.assertIsInstance(result, pd.DataFrame)
        {{ end }}


if __name__ == '__main__':
    unittest.main()