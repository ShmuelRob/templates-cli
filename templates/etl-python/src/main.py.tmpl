"""Main entry point for the ETL pipeline."""
import logging
import time
from typing import Any, Dict

from .extract import extract_data
from .transform import transform_data
from .load import load_data

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)


def run_etl_pipeline() -> None:
    """Run the complete ETL pipeline."""
    start_time = time.time()
    logger.info("Starting ETL pipeline")

    try:
        # Extract
        logger.info("Starting extraction from {{ .ExtractMethod }}")
        data = extract_data()
        logger.info(f"Extraction complete. Extracted {len(data) if hasattr(data, '__len__') else 'data'}")

        # Transform
        logger.info("Starting {{ .TransformMethod }} transformation")
        transformed_data = transform_data(data)
        logger.info("Transformation complete")

        # Load
        logger.info("Starting loading to {{ .LoadDestination }}")
        load_data(transformed_data)
        logger.info("Loading complete")

        elapsed_time = time.time() - start_time
        logger.info(f"ETL pipeline completed successfully in {elapsed_time:.2f} seconds")

    except Exception as e:
        logger.error(f"ETL pipeline failed: {str(e)}", exc_info=True)
        raise


if __name__ == "__main__":
    run_etl_pipeline()