"""Extract data from {{ .ExtractMethod }} source."""
import logging
from typing import Any, Dict, List, Union

{{ if eq .ExtractMethod "file" }}
import os
import pandas as pd
{{ else if eq .ExtractMethod "api" }}
import requests
from requests.exceptions import RequestException
{{ else if eq .ExtractMethod "database" }}
import os
from sqlalchemy import create_engine, text
{{ end }}

logger = logging.getLogger(__name__)

{{ if eq .ExtractMethod "file" }}
def extract_data(file_path: str = "data/input.csv") -> pd.DataFrame:
    """
    Extract data from a file.
    
    Args:
        file_path: Path to the input file
        
    Returns:
        DataFrame containing the extracted data
    """
    logger.info(f"Extracting data from file: {file_path}")
    
    # Make sure the file exists
    if not os.path.exists(file_path):
        logger.error(f"File not found: {file_path}")
        raise FileNotFoundError(f"File not found: {file_path}")
    
    # Determine file type from extension
    _, ext = os.path.splitext(file_path)
    
    try:
        if ext.lower() == '.csv':
            data = pd.read_csv(file_path)
        elif ext.lower() in ['.xls', '.xlsx']:
            data = pd.read_excel(file_path)
        elif ext.lower() == '.json':
            data = pd.read_json(file_path)
        else:
            logger.error(f"Unsupported file type: {ext}")
            raise ValueError(f"Unsupported file type: {ext}")
        
        logger.info(f"Successfully extracted {len(data)} rows from {file_path}")
        return data
    
    except Exception as e:
        logger.error(f"Error extracting data from file: {str(e)}")
        raise

{{ else if eq .ExtractMethod "api" }}
def extract_data(api_url: str = None) -> Union[Dict[str, Any], List[Dict[str, Any]]]:
    """
    Extract data from an API.
    
    Args:
        api_url: URL of the API endpoint
        
    Returns:
        Data extracted from the API as a dictionary or list of dictionaries
    """
    # Use default URL if none provided
    if api_url is None:
        # Use environment variable or default
        api_url = os.getenv("API_URL", "https://api.example.com/data")
    
    logger.info(f"Extracting data from API: {api_url}")
    
    try:
        # Add any necessary headers or auth
        headers = {
            "User-Agent": "{{ .PackageName }}/0.1.0",
            "Accept": "application/json",
            # "Authorization": "Bearer YOUR_TOKEN_HERE"
        }
        
        response = requests.get(api_url, headers=headers, timeout=30)
        response.raise_for_status()  # Raise exception for non-200 status codes
        
        data = response.json()
        logger.info(f"Successfully extracted data from API")
        return data
    
    except RequestException as e:
        logger.error(f"Error connecting to API: {str(e)}")
        raise
    except ValueError as e:
        logger.error(f"Error parsing API response: {str(e)}")
        raise
    except Exception as e:
        logger.error(f"Unexpected error during API extraction: {str(e)}")
        raise

{{ else if eq .ExtractMethod "database" }}
def extract_data(query: str = None) -> pd.DataFrame:
    """
    Extract data from a database.
    
    Args:
        query: SQL query to execute
        
    Returns:
        DataFrame containing the query results
    """
    # Use environment variables for database configuration
    db_user = os.getenv("DB_USER", "postgres")
    db_password = os.getenv("DB_PASSWORD", "password")
    db_host = os.getenv("DB_HOST", "localhost")
    db_port = os.getenv("DB_PORT", "5432")
    db_name = os.getenv("DB_NAME", "database")
    
    # Create database connection string
    db_url = f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"
    
    # Default query if none provided
    if query is None:
        query = "SELECT * FROM sample_table LIMIT 1000"
    
    logger.info("Extracting data from database")
    
    try:
        # Create engine and connect
        engine = create_engine(db_url)
        
        # Execute query and fetch data
        with engine.connect() as connection:
            data = pd.read_sql_query(sql=text(query), con=connection)
        
        logger.info(f"Successfully extracted {len(data)} rows from database")
        return data
    
    except Exception as e:
        logger.error(f"Error extracting data from database: {str(e)}")
        raise
{{ end }}